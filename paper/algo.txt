func (cl *CL) buildTheta(random bool, seed int64) error {

	var x uint

	if random && seed == 0 {
		rand.Seed(time.Now().UnixNano())
	} else {
		rand.Seed(seed)
	}

	// cf [Gri86] 226-7
	// We build a chain of subspaces V0<V1<V2...<Vk, and define Wk to be
	// Vk+1 - Vk.
	// Intuitively, Wk contains the vectors that will be added when we add the
	// next basis vector bk

	b0 := cl.basis[0]
	// basic assumption about V0, other than normalization, which is 'set' for
	// free, since the bitstring defaults to 00..0
	e := cl.setThetaByVec(b0, b0, (BitWeight(b0)/4)%2)
	if e != nil {
		return e
	}

	Vk := []uint{0, b0} // span(b0)

	for _, bk := range cl.basis[1:] {

		// create Wk by combining bk with every vector in Vk
		Wk := []uint{}
		for _, v := range Vk {
			Wk = append(Wk, bk^v)
		}

		// D1 - define {bk} x Vk and deduce Vk x {bk}
		// log.Printf("Starting D1")
		for _, v := range Vk {
			// theta(bk,0) must be 0 (normalized cocycle), but anything else is up for grabs.
			if v != 0 {
				if random {
					x = uint(rand.Uint32() & 1) // a random bit
				} else {
					x = 0
				}
				cl.setThetaByVec(bk, v, x)
				cl.setThetaByVec(v, bk, ((BitWeight(v&bk)/2)+x)%2)
			} else {
				// theta(bk,v) is implicitly 'set' to 0 in the bitstring
				cl.setThetaByVec(v, bk, (BitWeight(v&bk)/2)%2) // x is forced to be 0
			}
		}

		// D2 - deduce {bk} x Wk and Wk x {bk}
		// log.Printf("Starting D2")
		for _, v := range Vk {
			a, e := cl.ThetaByVec(bk, v)
			if e != nil {
				return e
			}
			// It looks weird that we're looping over Vk here, but remember
			// that bk^v is an element of _Wk_ not Vk
			cl.setThetaByVec(bk, bk^v, (BitWeight(bk)/4+uint(a))%2)
			cl.setThetaByVec(bk^v, bk, (BitWeight(bk&(bk^v))/2+(BitWeight(bk)/4+uint(a))%2)%2)
		}

		// D3 - deduce Wk x Wk
		// log.Printf("Starting D3")
		for _, v := range Vk {
			for _, v2 := range Vk {
				w := bk ^ v2
				a, e := cl.ThetaByVec(v, bk)
				if e != nil {
					e := fmt.Errorf("Error getting %.2x, %.2x: %s", v, bk)
					return e
				}
				b, e := cl.ThetaByVec(v, bk^w)
				if e != nil {
					e := fmt.Errorf("Error getting %.2x, %.2x: %s", v, bk^w)
					return e
				}
				c, e := cl.ThetaByVec(w, bk)
				if e != nil {
					e := fmt.Errorf("Error getting %.2x, %.2x: %s", w, bk)
					return e
				}
				res := (BitWeight(v&w)/2 + uint(a) + uint(b) + uint(c)) % 2
				cl.setThetaByVec(w, bk^v, res)
			}
		}

		// D4 - deduce Wk x Vk and Vk x Wk
		// log.Printf("Starting D4")
		for _, v := range Vk {
			for _, v2 := range Vk {
				w := bk ^ v2
				a, e := cl.ThetaByVec(w, v^w)
				if e != nil {
					return e
				}
				cl.setThetaByVec(w, v, (BitWeight(w)/4+uint(a))%2)
				cl.setThetaByVec(v, w, (BitWeight(v&w)/2+(BitWeight(w)/4+uint(a))%2)%2)
			}
		}

		Vk = append(Vk, Wk...)

	}
	cl.Seed = fmt.Sprintf("0x%x", seed)
	return nil
}
